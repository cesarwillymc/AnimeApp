project.afterEvaluate {
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*BR*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*\$ViewInjector*.*',
            '**/*\$ViewBinder*.*',
            '**/*\$Lambda$*.*', // Jacoco can not handle several '$' in class name.
            '**/*Module.*', // Modules for Dagger.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*Hilt*.*',
            '**/*hilt_*/*.*',
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*',
            '**/*_AssistedFactory*.*',
            '**/*_Impl*.*',
            '**/*_Factory.*', //Dagger auto-generated code
            '**/*Factory.*', //Dagger auto-generated code
            '**/*$*$*.*', // Anonymous classes generated by kotlin
            //add libraries
            'android/**/*.*',
            // 'com/**/*.*',
            'uk/**/*.*',
            'io/**/*.*',
            //remove what we don't test
            'androidTest/**/*.*',
            'test/**/*.*',
            '**/injector/**/*.*',
            '**/model/**/*.*',
            '**/mock/**/*.*',
            '**/event/**/*.*',
            '**/**_ViewBinding**',
            '**/**Directions**',
            '**/**Args**',
            '**/**DaoImp**',
            '**/**_Factory**',
            '**/*EventType.*',
            '**/**Mocked',
            '**/*DataBind*.*',
            '**/databinding/*',
            '**/di/*',
            '**/util/*',
            '**/*Activity*.*',
            '**/Base*.*',
            '**/base/*.*',
            '**/*Listener*.*'
    ]

    android.applicationVariants.forEach { variant ->
        def variantName = variant.name
        def compiler = variant.javaCompileProvider.get()
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        def coverageTaskName = "${testTaskName}Coverage"
        def coverageVerificationTaskName = "${testTaskName}CoverageVerification"
        def javaClasses = project.fileTree(dir: compiler.destinationDir, excludes: excludes)
        def kotlinClasses = project.fileTree(
                dir: "${project.buildDir}/tmp/kotlin-classes/${variantName}",
                excludes: excludes
        )
        def mainSrc = "${project.projectDir}/src/main/java/"
        def debug = "${project.projectDir}/src/debug/java/"
        def sources = [mainSrc, debug]
        project.tasks.create(coverageTaskName, JacocoReport) {
            group = "Reporting"
            description =
                    "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."
            executionData.setFrom(project.files("${project.buildDir}/jacoco/${testTaskName}.exec"))
            it.dependsOn(project.tasks.getByName(testTaskName))
            it.mustRunAfter(project.tasks.getByName(testTaskName))
        }

        project.tasks.create(coverageVerificationTaskName, JacocoCoverageVerification) {
            group = "Reporting"
            description = "Jacoco coverage verification for the ${variantName.capitalize()} build."
            sourceDirectories.setFrom(project.files(sources))
            classDirectories.setFrom(project.files(javaClasses, kotlinClasses))
            executionData.setFrom(project.files("${project.buildDir}/jacoco/${testTaskName}.exec"))
            violationRules {
                it.failOnViolation(true)
                it.rule {
                    limit {
                        minimum = "0.18".toBigDecimal()
                    }
                }
            }
            it.dependsOn(project.tasks.getByName(coverageTaskName))
            it.mustRunAfter(project.tasks.getByName(coverageTaskName))
        }
    }
}